import torch
import torchvision
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter
from torch.nn import Conv2d,MaxPool2d,Flatten,Linear
from torch import nn,device

#定义训练的设备(通过定义的cpu，cuda决定在哪里运行)
# device=torch.device("cpu")
device=torch.device("cuda")


train_data=torchvision.datasets.CIFAR10(root="./dataset",train=True,transform=torchvision.transforms.ToTensor(),download=True)
test_data=torchvision.datasets.CIFAR10(root="./dataset",train=False,transform=torchvision.transforms.ToTensor(),download=True)

train_data_size=len(train_data)
test_data_size=len(test_data)

print("训练数据集的长度为：{}".format(train_data_size))
print("测试数据集的长度为：{}".format(test_data_size))

# 利用Dataloader加载训练数据集
train_dataloader=DataLoader(train_data,64)
test_dataloader=DataLoader(test_data,64)



# 搭建神经网络
class Cifar(nn.Module):
    def __init__(self):
        super(Cifar,self).__init__()
        self.model=nn.Sequential(
            Conv2d(3, 32, 5, padding=2, stride=1),
            MaxPool2d(kernel_size=2),
            Conv2d(32, 32, 5, padding=2, stride=1),
            MaxPool2d(kernel_size=2),
            Conv2d(32, 64, 5, padding=2),
            MaxPool2d(kernel_size=2),
            Flatten(),
            Linear(1024, 64),
            Linear(64, 10)
        )

    def forward(self,x):
        x=self.model(x)
        return x


# 创建网络模型
cifar=Cifar()
cifar=cifar.to(device)

# 创建损失函数
loss_fn=nn.CrossEntropyLoss()
loss_fn=loss_fn.to(device)

# 优化器
learning_rate=0.01
optimizer=torch.optim.SGD(cifar.parameters(),lr=learning_rate)

# 设置网络的一些参数
# 记录训练的次数
total_train_step=0
# 记录测试的次数
total_test_step=0
# 训练的轮次
epoch=10

# 添加tensorboard
writer=SummaryWriter("logs_module")


for i in range(epoch):
    print("-------第{}轮训练开始-------".format(i+1))

    #     训练步骤开始

    # cifar.train();当有一些特殊层的时候，必须调用，其他情况调用与否都可
    for data in train_dataloader:
        imgs,targets=data

        imgs=imgs.to(device)
        targets=targets.to(device)

        outputs=cifar(imgs)
        loss=loss_fn(outputs,targets)

        #         优化器优化模型
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_train_step=total_train_step+1
        if(total_train_step%100==0):
            print("训练次数：{}，Loss：{}".format(total_train_step,loss))
            writer.add_scalar("train_loss",loss.item(),total_train_step)


    #         测试步骤开始
    # cifar.eval()；当有一些特殊层的时候，必须调用，其他情况调用与否都可
    total_test_loss=0
    total_accuracy=0#
    with torch.no_grad():
        for data in test_dataloader:
            imgs,targets=data

            imgs = imgs.to(device)
            targets = targets.to(device)

            outputs=cifar(imgs)
            loss=loss_fn(outputs,targets)
            total_test_loss=total_test_loss+loss.item()
            accuracy=(outputs.argmax(1)==targets).sum()
            total_accuracy=total_accuracy+accuracy

    print("整体测试集上的Loss：{}".format(total_test_loss))
    print("整体测试集上的正确率：{}".format((total_accuracy/test_data_size)))

    writer.add_scalar("test_loss",total_test_loss,total_test_step)
    writer.add_scalar("test_accuracy",total_accuracy/test_data_size,total_test_step)
    total_test_step=total_test_step+1


    torch.save(cifar,"cifar_{}.pth".format(i))
    print("模型已保存")

writer.close()




